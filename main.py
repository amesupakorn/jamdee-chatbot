from fastapi import FastAPI, Request
from app.line_api import reply_message, get_user_profile, send_quiz, send_score_card
from app.scores import update_or_add_user_score, reset_user_score
from app.quiz import get_random_question, record_question_history
from dotenv import load_dotenv
import os
import json

load_dotenv()
app = FastAPI()

@app.post("/webhook")
async def webhook(request: Request):
    body = await request.json()
    print(json.dumps(body, indent=2))

    for event in body["events"]:
        user_id = event["source"]["userId"]
        profile = get_user_profile(user_id)
        name = profile.get("displayName", "user")

        if event["type"] == "message":
            text = event["message"]["text"].lower()
            if "‡πÄ‡∏£‡∏¥‡πà‡∏°" in text or "quiz" in text:
                send_quiz(user_id)
            elif "‡∏£‡∏µ‡πÄ‡∏ã‡∏ï" in text:
                reset_user_score(user_id)
                reply_message(user_id, "‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‚ú®")       
            elif text == "‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô":
                send_score_card(user_id)
            else:
                reply_message(user_id, "‡∏û‡∏¥‡∏°‡∏û‡πå '‡πÄ‡∏£‡∏¥‡πà‡∏°' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö ü§ñ")

        elif event["type"] == "postback":
            try:
                data = event["postback"]["data"]
                params = dict(item.split("=") for item in data.split("|"))

                answer = params.get("answer", "").strip()
                correct = params.get("correct", "").strip()
                question = params.get("question", "").strip()

                if not answer or not correct or not question:
                    raise ValueError("Missing data in postback")

                is_correct = answer == correct
                score = update_or_add_user_score(user_id, name, is_correct)

                record_question_history(user_id, question)

                if is_correct:
                    reply_message(user_id, f"‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ 10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏£‡∏ß‡∏° {score} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)")
                else:
                    reply_message(user_id, f"‚ùå ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏≠: {correct}\n‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ {score}")

                send_quiz(user_id)

            except Exception as e:
                print("‚ö†Ô∏è ERROR handling postback:", e)
                reply_message(user_id, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")
       
    return {"status": "ok"}